version: '3.9'

x-common-variables: &common-variables
  DB_HOST: db
  DB_NAME: ${DB_NAME}
  DB_USER: ${DB_USER}
  DB_PASS: ${DB_PASS}
  DJANGO_SETTINGS_MODULE: app.settings
  CELERY_BROKER_URL: redis://redis:6379/0
  CELERY_RESULT_BACKEND: redis://redis:6379/0

services:
  app:
    build:
      context: .
    restart: always
    networks:
      - app-network
    volumes:
      - static-data:/vol/web
    environment:
      <<: *common-variables
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:14.5-alpine3.16
    restart: always
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  proxy:
    build:
      context: ./proxy
    restart: always
    networks:
      - app-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static-data:/vol/static
      - certbot-web:/vol/www
      - proxy-dhparams:/vol/proxy
      - certbot-certs:/etc/letsencrypt
    environment:
      - DOMAIN=${DOMAIN}
    depends_on:
      - app

  redis:
    image: redis:6.2-alpine
    restart: always
    networks:
      - app-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: .
    command: celery -A app worker --loglevel=info
    restart: always
    networks:
      - app-network
    volumes:
      - ./app:/app
      - celerybeat-data:/var/run/celery
    environment:
      <<: *common-variables
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery-beat:
    build:
      context: .
    command: celery -A app beat --loglevel=info
    restart: always
    networks:
      - app-network
    volumes:
      - ./app:/app
      - celerybeat-data:/var/run/celery
    environment:
      <<: *common-variables
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  certbot:
    build:
      context: ./certbot
    command: echo "Skipping..."
    networks:
      - app-network
    environment:
      - EMAIL=${ACME_DEFAULT_EMAIL}
      - DOMAIN=${DOMAIN}
    volumes:
      - certbot-web:/vol/www
      - certbot-certs:/etc/letsencrypt/
    depends_on:
      - proxy

volumes:
  postgres-data:
  static-data:
  certbot-web:
  proxy-dhparams:
  certbot-certs:
  redis-data:
  celerybeat-data:
    
networks:
  app-network:
    name: app-network
    driver: bridge